#!/bin/bash

# Script to show system information -> add to /etc/update-motd.d/ and chmod +x

# set threshold for memory warning and disk warning
memory_warning_threshold=70
disk_warning_threshold=70
load_warning_threshold=60

# escape sequences for formatting text
# bold=$(printf "\e[1m")
boldblue=$(printf "\e[1;34m")
boldred=$(printf "\e[1;31m")
reset=$(printf "\e[0m")
# bold_blue_text=$(printf "\e[1;34mThis is bold blue text.\e[0m")
# bold_blue_text="${bold}This is bold blue text.${reset}"
# bold_blue_text="${boldblue}This is bold blue text.${reset}"
# printf "%s\n" "$bold_blue_text"

# Get the number of CPU cores
cpu_cores=$(nproc)

# Load average
load=$(cut -d " " -f 1-3 /proc/loadavg)
# Load percentage -> adjusted for number of cpu cores
load_percentage=$(echo "$load" | awk -v cores="$cpu_cores" '{print int(($1 * 100) / cores)}')
# load_percentage=$(echo "$load" | awk '{print int($1*100)}')
# printf "Load percentage: %s\n" "${load_percentage}"
#
# Apply formatting based on load percentage
load_warning=""
if [ "$load_percentage" -gt "$load_warning_threshold" ]; then
  load_warning="${boldred}       High system load${reset}"
fi

# Uptime
uptime=$(uptime -p | sed 's/up //')

# Memory usage
mem_info=$(free -m | awk '/Mem:/ {printf "  %.1fG / %.1fG", $3/1000, $2/1000}')
mem_used=$(free -m | awk '/Mem:/ {print $3}')
mem_total=$(free -m | awk '/Mem:/ {print $2}')
mem_percentage=$(awk "BEGIN {printf \"%.0f\", ($mem_used/$mem_total)*100}")
mem_warning=""
if [ "$mem_percentage" -gt $memory_warning_threshold ]; then
  mem_warning="${boldred}  High memory usage${reset}"
fi

# Disk usage
df_output=$(df -BG --output=source,avail,used,size / | tail -1)

# Extract the values
device=$(echo $df_output | awk '{print $1}')
available=$(echo $df_output | awk '{print $2}' | sed 's/G//')
used=$(echo $df_output | awk '{print $3}' | sed 's/G//')
size=$(echo $df_output | awk '{print $4}' | sed 's/G//')

# Calculate percentage usage
disk_percentage=$(awk "BEGIN {printf \"%.0f\", (${used}/${size})*100}")

# Format the usage string
root_usage=$(printf "%d%%   %dG / %dG" "$disk_percentage" "$used" "$size")

disk_warning=""
if [ "$disk_percentage" -gt $disk_warning_threshold ]; then
  disk_warning="${boldred}     High disk usage${reset}"
fi

# Users logged in
users=$(who | wc -l)

# Last login
last_login=$(last -n 1 -a | head -n 1)

# IP address
ip_address=$(hostname -I | awk '{print $1}')

# IPv6 address
ipv6_address=$(ip -6 addr show scope global | grep inet6 | awk '{print $2}' | cut -d/ -f1 | head -n 1)

# Kernel version
kernel_version=$(uname -rvm)
# Distribution and release 

distribution=$(lsb_release -d -s)

# Check if a reboot is required
if [ -f /var/run/reboot-required ]; then
  reboot_required="${boldblue}Reboot required${reset}"
else
  # reboot_required="${boldblue}Reboot required${reset}"
  reboot_required="No"
fi

# Check if packages need to be updated
# if [[ $(apt-get --just-print upgrade | grep -c "^Inst") -gt 0 ]]; then
upgradable_packages=$(apt list --upgradable 2>/dev/null | grep -c 'upgradable')
if [ "$upgradable_packages" -gt 0 ]; then
  packages_to_update="${boldblue}Packages to update${reset} -> apt list --upgradable"
else
  # packages_to_update="${boldblue}Packages to update${reset}"
  packages_to_update="No"
fi

# Print the information with aligned values
printf "\nWelcome to %s - %s\n\n" "$(hostname)" "$(date)"

printf "  %-22s %s\n" "Distribution:" "$distribution"

printf "  %-22s %s\n" "Kernel Version:" "$kernel_version"
printf "  %-22s %s\n" "Uptime:" "$uptime"
printf "  %-22s %s\n" "Users Logged In:" "$users"
printf "  %-22s %s\n\n" "Last Login:" "$last_login"

printf "  %-22s %s %s\n" "System Load:" "$load" "$load_warning"
printf "  %-22s %s%% %s %s\n" "Memory Usage:" "$mem_percentage" "$mem_info" "$mem_warning"
printf "  %-22s %s %s\n\n" "Disk Usage:" "$root_usage" "$disk_warning"

printf "  %-22s %s\n" "IPv4 Address:" "$ip_address"
printf "  %-22s %s\n\n" "IPv6 Address:" "$ipv6_address"

printf "  %-22s %s\n" "Reboot Required:" "$reboot_required"
printf "  %-22s %s\n" "Packages to Update:" "$packages_to_update"
echo ""
