server {
    server_name    DOMAIN.com www.DOMAIN.com;
    root           /var/www/FOLDER;
    index          index.html index.php;

    # ** NGINX PAGE CACHE START - above first location block **
    set $skip_cache 0;

    # POST requests and urls with a query string should always go to PHP
    if ($request_method = POST) {
        set $skip_cache 1;
    }   
    # if ($request_uri ~* "\?") {
        # set $skip_cache 1;
    # }   
    # if ($query_string != "") {
        # set $skip_cache 1;
    # }   

    # Don’t cache uris containing the following segments
    if ($request_uri ~* "/wp-admin/|/xmlrpc.php|wp-.*.php|/feed/|index.php|sitemap(_index)?.xml") {
        set $skip_cache 1;
    }   

    # Don’t use the cache for logged in users or recent commenters
    if ($http_cookie ~* "comment_author|wordpress_[a-f0-9]+|wp-postpass|wordpress_no_cache|wordpress_logged_in") {
        set $skip_cache 1;
    }

    # Don’t use the cache for for any woocommerce cookies -> important not to get geo price problems!!
    # Woocommerce cookie (wp_coocommerce...) only added when something is/was in cart
    if ($http_cookie ~* "woocommerce") {
        set $skip_cache 1;
    }

    # Don’t use the cache if cookie shows something is in the cart
    if ($http_cookie ~* "woocommerce_items_in_cart") {	
        set $skip_cache 1;
    }

    # Don’t cache any shop/woocommerce (can be improved further)
    if ($request_uri ~* "/store.*|/warenkorb.*|/kasse.*|/cart.*|/wp-json.*|/my-account.*|/checkout.*|/addons.*|/wishlist.*") {
       set $skip_cache 1;
    }

    # ** NGINX PAGE CACHE END  - above first location block **	

	
    # Location directives to deny public acess (according to htaccess files)
    # block one full folder (and all files in it, and all subfolders)
    location ^~ /wp-content/updraft { deny all;}

    # example to block one specific file
    # location = /wp-content/uploads/download-manager-files/xxx_logo.jpg { deny all;}


    # Common deny or drop locations for wordpress
    location ~* wp-config.php { deny all; }
    location ~* wp-admin/includes { deny all; }
    # location ~* wp-includes/.*\.php$ { deny all; }
    location ~ /\. { access_log off; log_not_found off; deny all; }
    location ~ ~$ { access_log off; log_not_found off; deny all; }

     # Prevent scripts from running in /uploads
     location ~* ^/wp-content/uploads/.*.(html|htm|shtml|php)$ {
        types { }
        default_type text/plain;
     }

    # general location block for wordpress
    location / {
      # try_files $uri $uri/ =404;
        try_files $uri $uri/ /index.php$is_args$args;

      # Include W3TC nginx.conf file found in WordPress root -> attention: can ause 404s!
      # include /var/www/FOLDER/nginx.conf;

    }

    location ~* \.php$ {
		# ** NGINX PAGE CACHE START - within php location block - options: 60m, 5h, 5d -> adjust in nginx.conf too! **
		fastcgi_cache_bypass $skip_cache;
		fastcgi_no_cache $skip_cache;
		fastcgi_cache cacheGLOBAL;
		fastcgi_cache_valid 20m;
		add_header X-FastCGI-Cache $upstream_cache_status;
		# ** NGINX PAGE CACHE END - within php location block**
		
		fastcgi_pass unix:/run/php/php7.2-fpm.sock;
		include         fastcgi_params;
		fastcgi_param   SCRIPT_FILENAME    $document_root$fastcgi_script_name;
		fastcgi_param   SCRIPT_NAME        $fastcgi_script_name;
    }

    location = /favicon.ico { log_not_found off; access_log off; }
    location = /robots.txt { log_not_found off; access_log off; allow all; }
    location ~* \.(css|gif|ico|jpeg|jpg|js|png)$ {
        expires max;
        log_not_found off;
    }

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    location ~ /\.ht {
        deny all;
    }


    listen [::]:443 ssl ipv6only=on; # managed by Certbot
    listen 443 ssl http2; # managed by Certbot
    # listen 443 ssl; # managed by Certbot
    ssl_certificate /etc/letsencrypt/live/DOMAIN.com/fullchain.pem; # managed by Certbot
    ssl_certificate_key /etc/letsencrypt/live/DOMAIN.com/privkey.pem; # managed by Certbot
    include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot
    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot


}

server {
    if ($host = www.DOMAIN.com) {
        return 301 https://$host$request_uri;
    } # managed by Certbot

    if ($host = DOMAIN.com) {
        return 301 https://www.$host$request_uri;
    } # managed by Certbot

    listen 80;
    listen [::]:80;
    server_name    DOMAIN.com www.DOMAIN.com;
    return 404; # managed by Certbot

}
